code-
class Animal:
    def __init__(self, species, name, age):
        self.species = species
        self.name = name
        self.age = age
        self.sound = None  # Default sound

    def make_sound(self):
        if self.sound:
            print(f"{self.name} the {self.species} says {self.sound}.")
        else:
            print(f"{self.name} the {self.species} does not make a sound.")


# Create objects (animals of different types)
lion = Animal(species='Lion', name='Simba', age=5)
elephant = Animal(species='Elephant', name='Dumbo', age=10)

# Add object attributes
lion.sound = 'Roar'
elephant.sound = 'Trumpet'

# Access attributes of class and objects
print("Class Attribute:")
print("Default sound of all animals:", Animal.sound)
print("\nObject Attributes:")
print("Sound of Lion:", lion.sound)
print("Sound of Elephant:", elephant.sound)

# Access methods of objects
lion.make_sound()
elephant.make_sound()


# Example of single class inheritance.
class Animal:
    def __init__(self, species, name):
        self.species = species
        self.name = name

    def make_sound(self):  # Changed the method name to make_sound
        print("This animal makes a sound.")


class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__('Dog', name)  # Calling the constructor of the base class
        self.breed = breed

    def make_sound(self):  # Changed the method name to make_sound
        print("Woof!")


# Create an object of the derived class
dog = Dog(name='Buddy', breed='Labrador')

# Accessing attributes and methods of the base and derived classes
print("Name:", dog.name)
print("Breed:", dog.breed)
dog.make_sound()  # Changed to call the make_sound method